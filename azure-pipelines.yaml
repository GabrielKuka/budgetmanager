trigger:
  - master

pool:
  name: server1_pool

variables:
  dockerComposeFile: "docker-compose.yml"

stages:
  - stage: CheckCode
    displayName: "Check for Code Formatting"
    jobs:
      - job: CheckBackendCode
        displayName: "Check Django Code with Black"
        steps:
          - script: |
              cd backend && uv run black -l 79 --check .
            displayName: "Black Check"
      - job: CheckFrontendCode
        displayName: "Check React Code with Prettier"
        steps:
          - script: |
              echo "Checking if Prettier 2.8.8 is installed..."
              INSTALLED_VERSION=$(npx prettier --version 2>/dev/null || echo "0.0.0")
              DESIRED_VERSION="2.8.8"

              if [ "$INSTALLED_VERSION" != "$DESIRED_VERSION" ]; then
                echo "Prettier $DESIRED_VERSION is not installed (found version $INSTALLED_VERSION). Installing..."
                npm install prettier@$DESIRED_VERSION
              else
                echo "Prettier $DESIRED_VERSION is already installed."
              fi
            displayName: "Check Prettier"
          - script: |
              echo "Checking Code with Prettier..."
              cd frontend && npx prettier ./src/ --check
            displayName: "Prettier Check"

  - stage: BuildAndDeploy
    displayName: "Build and Deploy BudgetManager"
    dependsOn: CheckCode
    condition: succeeded('CheckCode')
    jobs:
      - job: StopContainers
        displayName: "Stop Existing Containers (frontend & backend)"
        steps:
          - script: |
              echo "Stopping containers..."
              docker stop budgetmanager_backend budgetmanager_frontend || true
              docker rm -f budgetmanager_backend budgetmanager_frontend || true
              docker network rm budgetmanager_budget_network || true
            displayName: "Remove Containers And Network"
            continueOnError: false

      - job: StartContainers
        displayName: "Start New Containers (frontend & backend)"
        dependsOn: StopContainers
        condition: succeeded('StopContainers')
        steps:
          - script: |
              echo "Building and starting new containers..."
              docker-compose -f $(dockerComposeFile) -p budgetmanager up -d --build
            displayName: "Run docker-compose up"

  - stage: Cleanup
    jobs:
      - job: CleanupResources
        steps:
          - bash: |
              echo "Cleaning build directory"
              rm -rf $(Agent.BuildDirectory)/*

              echo "Cleaning docker resources (unused images and volumes)"
              docker image prune -af
              docker volume prune -f
        displayName: "Clean up pipeline resources"
